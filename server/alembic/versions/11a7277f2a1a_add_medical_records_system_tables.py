"""add_medical_records_system_tables

Revision ID: 11a7277f2a1a
Revises: 3bf2106995e4
Create Date: 2025-10-01 15:23:26.946282

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '11a7277f2a1a'
down_revision = '3bf2106995e4'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('clinic_profiles',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('clinic_name', sa.String(length=200), nullable=False),
    sa.Column('license_number', sa.String(length=100), nullable=False),
    sa.Column('address', sa.Text(), nullable=False),
    sa.Column('phone', sa.String(length=20), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('operating_hours', sa.JSON(), nullable=False),
    sa.Column('services_offered', sa.JSON(), nullable=False),
    sa.Column('is_verified', sa.Boolean(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.public_id'], name=op.f('fk_clinic_profiles_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_clinic_profiles'))
    )
    op.create_index(op.f('ix_clinic_profiles_clinic_name'), 'clinic_profiles', ['clinic_name'], unique=False)
    op.create_index(op.f('ix_clinic_profiles_license_number'), 'clinic_profiles', ['license_number'], unique=True)
    op.create_index(op.f('ix_clinic_profiles_user_id'), 'clinic_profiles', ['user_id'], unique=True)
    op.create_table('doctor_profiles',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('license_number', sa.String(length=100), nullable=False),
    sa.Column('specialization', sa.String(length=100), nullable=True),
    sa.Column('years_of_experience', sa.Integer(), nullable=True),
    sa.Column('qualifications', sa.JSON(), nullable=False),
    sa.Column('bio', sa.Text(), nullable=True),
    sa.Column('is_verified', sa.Boolean(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.public_id'], name=op.f('fk_doctor_profiles_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_doctor_profiles'))
    )
    op.create_index(op.f('ix_doctor_profiles_license_number'), 'doctor_profiles', ['license_number'], unique=True)
    op.create_index(op.f('ix_doctor_profiles_specialization'), 'doctor_profiles', ['specialization'], unique=False)
    op.create_index(op.f('ix_doctor_profiles_user_id'), 'doctor_profiles', ['user_id'], unique=True)
    op.create_table('allergies',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('pet_id', sa.UUID(), nullable=False),
    sa.Column('allergen', sa.String(length=200), nullable=False),
    sa.Column('allergy_type', sa.Enum('FOOD', 'MEDICATION', 'ENVIRONMENTAL', 'FLEA', 'OTHER', name='allergytype'), nullable=False),
    sa.Column('severity', sa.Enum('MILD', 'MODERATE', 'SEVERE', 'LIFE_THREATENING', name='allergyseverity'), nullable=False),
    sa.Column('symptoms', sa.JSON(), nullable=False),
    sa.Column('reaction_description', sa.Text(), nullable=True),
    sa.Column('diagnosed_by_doctor_id', sa.UUID(), nullable=True),
    sa.Column('diagnosed_date', sa.Date(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_by_user_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['created_by_user_id'], ['users.public_id'], name=op.f('fk_allergies_created_by_user_id_users')),
    sa.ForeignKeyConstraint(['diagnosed_by_doctor_id'], ['doctor_profiles.id'], name=op.f('fk_allergies_diagnosed_by_doctor_id_doctor_profiles')),
    sa.ForeignKeyConstraint(['pet_id'], ['pets.id'], name=op.f('fk_allergies_pet_id_pets')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_allergies'))
    )
    op.create_index(op.f('ix_allergies_allergy_type'), 'allergies', ['allergy_type'], unique=False)
    op.create_index(op.f('ix_allergies_is_active'), 'allergies', ['is_active'], unique=False)
    op.create_index(op.f('ix_allergies_pet_id'), 'allergies', ['pet_id'], unique=False)
    op.create_index(op.f('ix_allergies_severity'), 'allergies', ['severity'], unique=False)
    op.create_table('doctor_clinic_associations',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('doctor_id', sa.UUID(), nullable=False),
    sa.Column('clinic_id', sa.UUID(), nullable=False),
    sa.Column('employment_type', sa.Enum('FULL_TIME', 'PART_TIME', 'VISITING', 'CONTRACTOR', name='employmenttype'), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('joined_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['clinic_id'], ['clinic_profiles.id'], name=op.f('fk_doctor_clinic_associations_clinic_id_clinic_profiles')),
    sa.ForeignKeyConstraint(['doctor_id'], ['doctor_profiles.id'], name=op.f('fk_doctor_clinic_associations_doctor_id_doctor_profiles')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_doctor_clinic_associations')),
    sa.UniqueConstraint('doctor_id', 'clinic_id', name='uq_doctor_clinic')
    )
    op.create_index(op.f('ix_doctor_clinic_associations_clinic_id'), 'doctor_clinic_associations', ['clinic_id'], unique=False)
    op.create_index(op.f('ix_doctor_clinic_associations_doctor_id'), 'doctor_clinic_associations', ['doctor_id'], unique=False)
    op.create_table('medical_records',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('pet_id', sa.UUID(), nullable=False),
    sa.Column('visit_date', sa.DateTime(), nullable=False),
    sa.Column('clinic_id', sa.UUID(), nullable=False),
    sa.Column('doctor_id', sa.UUID(), nullable=False),
    sa.Column('visit_type', sa.Enum('ROUTINE_CHECKUP', 'EMERGENCY', 'SURGERY', 'VACCINATION', 'FOLLOW_UP', 'OTHER', name='visittype'), nullable=False),
    sa.Column('chief_complaint', sa.Text(), nullable=True),
    sa.Column('diagnosis', sa.Text(), nullable=True),
    sa.Column('symptoms', sa.JSON(), nullable=False),
    sa.Column('treatment_plan', sa.Text(), nullable=True),
    sa.Column('clinical_notes', sa.Text(), nullable=True),
    sa.Column('weight', sa.Float(), nullable=True),
    sa.Column('temperature', sa.Float(), nullable=True),
    sa.Column('vital_signs', sa.JSON(), nullable=False),
    sa.Column('follow_up_required', sa.Boolean(), nullable=False),
    sa.Column('follow_up_date', sa.Date(), nullable=True),
    sa.Column('follow_up_notes', sa.Text(), nullable=True),
    sa.Column('is_emergency', sa.Boolean(), nullable=False),
    sa.Column('created_by_user_id', sa.UUID(), nullable=False),
    sa.Column('created_by_role', sa.String(length=50), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['clinic_id'], ['clinic_profiles.id'], name=op.f('fk_medical_records_clinic_id_clinic_profiles')),
    sa.ForeignKeyConstraint(['created_by_user_id'], ['users.public_id'], name=op.f('fk_medical_records_created_by_user_id_users')),
    sa.ForeignKeyConstraint(['doctor_id'], ['doctor_profiles.id'], name=op.f('fk_medical_records_doctor_id_doctor_profiles')),
    sa.ForeignKeyConstraint(['pet_id'], ['pets.id'], name=op.f('fk_medical_records_pet_id_pets')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_medical_records'))
    )
    op.create_index('idx_pet_visit_date', 'medical_records', ['pet_id', 'visit_date'], unique=False, postgresql_ops={'visit_date': 'DESC'})
    op.create_index(op.f('ix_medical_records_clinic_id'), 'medical_records', ['clinic_id'], unique=False)
    op.create_index(op.f('ix_medical_records_doctor_id'), 'medical_records', ['doctor_id'], unique=False)
    op.create_index(op.f('ix_medical_records_pet_id'), 'medical_records', ['pet_id'], unique=False)
    op.create_index(op.f('ix_medical_records_visit_date'), 'medical_records', ['visit_date'], unique=False)
    op.create_index(op.f('ix_medical_records_visit_type'), 'medical_records', ['visit_type'], unique=False)
    op.create_table('pet_clinic_access',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('pet_id', sa.UUID(), nullable=False),
    sa.Column('clinic_id', sa.UUID(), nullable=False),
    sa.Column('doctor_id', sa.UUID(), nullable=True),
    sa.Column('owner_id', sa.UUID(), nullable=False),
    sa.Column('access_granted_at', sa.DateTime(), nullable=False),
    sa.Column('access_expires_at', sa.DateTime(), nullable=False),
    sa.Column('status', sa.Enum('ACTIVE', 'EXPIRED', 'REVOKED', name='accessstatus'), nullable=False),
    sa.Column('otp_id', sa.UUID(), nullable=True),
    sa.Column('purpose', sa.String(length=200), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['clinic_id'], ['clinic_profiles.id'], name=op.f('fk_pet_clinic_access_clinic_id_clinic_profiles')),
    sa.ForeignKeyConstraint(['doctor_id'], ['doctor_profiles.id'], name=op.f('fk_pet_clinic_access_doctor_id_doctor_profiles')),
    sa.ForeignKeyConstraint(['otp_id'], ['otps.id'], name=op.f('fk_pet_clinic_access_otp_id_otps')),
    sa.ForeignKeyConstraint(['owner_id'], ['users.public_id'], name=op.f('fk_pet_clinic_access_owner_id_users')),
    sa.ForeignKeyConstraint(['pet_id'], ['pets.id'], name=op.f('fk_pet_clinic_access_pet_id_pets')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_pet_clinic_access'))
    )
    op.create_index('idx_pet_clinic_status', 'pet_clinic_access', ['pet_id', 'clinic_id', 'status'], unique=False)
    op.create_index(op.f('ix_pet_clinic_access_access_expires_at'), 'pet_clinic_access', ['access_expires_at'], unique=False)
    op.create_index(op.f('ix_pet_clinic_access_clinic_id'), 'pet_clinic_access', ['clinic_id'], unique=False)
    op.create_index(op.f('ix_pet_clinic_access_doctor_id'), 'pet_clinic_access', ['doctor_id'], unique=False)
    op.create_index(op.f('ix_pet_clinic_access_pet_id'), 'pet_clinic_access', ['pet_id'], unique=False)
    op.create_index(op.f('ix_pet_clinic_access_status'), 'pet_clinic_access', ['status'], unique=False)
    op.create_table('lab_tests',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('medical_record_id', sa.UUID(), nullable=True),
    sa.Column('pet_id', sa.UUID(), nullable=False),
    sa.Column('test_name', sa.String(length=200), nullable=False),
    sa.Column('test_type', sa.String(length=100), nullable=False),
    sa.Column('ordered_by_doctor_id', sa.UUID(), nullable=False),
    sa.Column('ordered_at', sa.DateTime(), nullable=False),
    sa.Column('performed_at', sa.DateTime(), nullable=True),
    sa.Column('performed_by_clinic_id', sa.UUID(), nullable=True),
    sa.Column('status', sa.Enum('ORDERED', 'IN_PROGRESS', 'COMPLETED', 'CANCELLED', name='teststatus'), nullable=False),
    sa.Column('results', sa.Text(), nullable=True),
    sa.Column('results_json', sa.JSON(), nullable=False),
    sa.Column('results_file_url', sa.String(length=500), nullable=True),
    sa.Column('reference_ranges', sa.JSON(), nullable=False),
    sa.Column('abnormal_flags', sa.JSON(), nullable=False),
    sa.Column('interpretation', sa.Text(), nullable=True),
    sa.Column('is_abnormal', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['medical_record_id'], ['medical_records.id'], name=op.f('fk_lab_tests_medical_record_id_medical_records')),
    sa.ForeignKeyConstraint(['ordered_by_doctor_id'], ['doctor_profiles.id'], name=op.f('fk_lab_tests_ordered_by_doctor_id_doctor_profiles')),
    sa.ForeignKeyConstraint(['performed_by_clinic_id'], ['clinic_profiles.id'], name=op.f('fk_lab_tests_performed_by_clinic_id_clinic_profiles')),
    sa.ForeignKeyConstraint(['pet_id'], ['pets.id'], name=op.f('fk_lab_tests_pet_id_pets')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_lab_tests'))
    )
    op.create_index('idx_ordered_at_desc', 'lab_tests', ['ordered_at'], unique=False, postgresql_ops={'ordered_at': 'DESC'})
    op.create_index(op.f('ix_lab_tests_medical_record_id'), 'lab_tests', ['medical_record_id'], unique=False)
    op.create_index(op.f('ix_lab_tests_ordered_at'), 'lab_tests', ['ordered_at'], unique=False)
    op.create_index(op.f('ix_lab_tests_ordered_by_doctor_id'), 'lab_tests', ['ordered_by_doctor_id'], unique=False)
    op.create_index(op.f('ix_lab_tests_pet_id'), 'lab_tests', ['pet_id'], unique=False)
    op.create_index(op.f('ix_lab_tests_status'), 'lab_tests', ['status'], unique=False)
    op.create_table('prescriptions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('medical_record_id', sa.UUID(), nullable=False),
    sa.Column('pet_id', sa.UUID(), nullable=False),
    sa.Column('medication_name', sa.String(length=200), nullable=False),
    sa.Column('dosage', sa.String(length=100), nullable=False),
    sa.Column('dosage_unit', sa.String(length=50), nullable=False),
    sa.Column('frequency', sa.String(length=100), nullable=False),
    sa.Column('route', sa.String(length=50), nullable=False),
    sa.Column('duration', sa.String(length=100), nullable=False),
    sa.Column('instructions', sa.Text(), nullable=True),
    sa.Column('prescribed_by_doctor_id', sa.UUID(), nullable=False),
    sa.Column('prescribed_date', sa.Date(), nullable=False),
    sa.Column('start_date', sa.Date(), nullable=False),
    sa.Column('end_date', sa.Date(), nullable=True),
    sa.Column('quantity', sa.Float(), nullable=False),
    sa.Column('refills_allowed', sa.Integer(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['medical_record_id'], ['medical_records.id'], name=op.f('fk_prescriptions_medical_record_id_medical_records')),
    sa.ForeignKeyConstraint(['pet_id'], ['pets.id'], name=op.f('fk_prescriptions_pet_id_pets')),
    sa.ForeignKeyConstraint(['prescribed_by_doctor_id'], ['doctor_profiles.id'], name=op.f('fk_prescriptions_prescribed_by_doctor_id_doctor_profiles')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_prescriptions'))
    )
    op.create_index(op.f('ix_prescriptions_end_date'), 'prescriptions', ['end_date'], unique=False)
    op.create_index(op.f('ix_prescriptions_is_active'), 'prescriptions', ['is_active'], unique=False)
    op.create_index(op.f('ix_prescriptions_medical_record_id'), 'prescriptions', ['medical_record_id'], unique=False)
    op.create_index(op.f('ix_prescriptions_pet_id'), 'prescriptions', ['pet_id'], unique=False)
    op.create_index(op.f('ix_prescriptions_prescribed_by_doctor_id'), 'prescriptions', ['prescribed_by_doctor_id'], unique=False)
    op.create_table('vaccinations',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('pet_id', sa.UUID(), nullable=False),
    sa.Column('medical_record_id', sa.UUID(), nullable=True),
    sa.Column('vaccine_name', sa.String(length=200), nullable=False),
    sa.Column('vaccine_type', sa.String(length=100), nullable=False),
    sa.Column('manufacturer', sa.String(length=200), nullable=True),
    sa.Column('batch_number', sa.String(length=100), nullable=True),
    sa.Column('administered_by_doctor_id', sa.UUID(), nullable=False),
    sa.Column('administered_at', sa.DateTime(), nullable=False),
    sa.Column('administration_site', sa.String(length=100), nullable=True),
    sa.Column('clinic_id', sa.UUID(), nullable=False),
    sa.Column('next_due_date', sa.Date(), nullable=True),
    sa.Column('is_booster', sa.Boolean(), nullable=False),
    sa.Column('reaction_notes', sa.Text(), nullable=True),
    sa.Column('certificate_url', sa.String(length=500), nullable=True),
    sa.Column('is_required_by_law', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['administered_by_doctor_id'], ['doctor_profiles.id'], name=op.f('fk_vaccinations_administered_by_doctor_id_doctor_profiles')),
    sa.ForeignKeyConstraint(['clinic_id'], ['clinic_profiles.id'], name=op.f('fk_vaccinations_clinic_id_clinic_profiles')),
    sa.ForeignKeyConstraint(['medical_record_id'], ['medical_records.id'], name=op.f('fk_vaccinations_medical_record_id_medical_records')),
    sa.ForeignKeyConstraint(['pet_id'], ['pets.id'], name=op.f('fk_vaccinations_pet_id_pets')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_vaccinations'))
    )
    op.create_index(op.f('ix_vaccinations_administered_at'), 'vaccinations', ['administered_at'], unique=False)
    op.create_index(op.f('ix_vaccinations_next_due_date'), 'vaccinations', ['next_due_date'], unique=False)
    op.create_index(op.f('ix_vaccinations_pet_id'), 'vaccinations', ['pet_id'], unique=False)
    op.create_index(op.f('ix_vaccinations_vaccine_name'), 'vaccinations', ['vaccine_name'], unique=False)
    op.create_table('medical_record_attachments',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('medical_record_id', sa.UUID(), nullable=True),
    sa.Column('lab_test_id', sa.UUID(), nullable=True),
    sa.Column('vaccination_id', sa.UUID(), nullable=True),
    sa.Column('pet_id', sa.UUID(), nullable=False),
    sa.Column('file_name', sa.String(length=255), nullable=False),
    sa.Column('file_url', sa.String(length=500), nullable=False),
    sa.Column('file_type', sa.String(length=50), nullable=False),
    sa.Column('file_size', sa.BigInteger(), nullable=False),
    sa.Column('attachment_type', sa.Enum('LAB_RESULT', 'XRAY', 'ULTRASOUND', 'CERTIFICATE', 'REPORT', 'PHOTO', 'OTHER', name='attachmenttype'), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('uploaded_by_user_id', sa.UUID(), nullable=False),
    sa.Column('uploaded_by_role', sa.String(length=50), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['lab_test_id'], ['lab_tests.id'], name=op.f('fk_medical_record_attachments_lab_test_id_lab_tests')),
    sa.ForeignKeyConstraint(['medical_record_id'], ['medical_records.id'], name=op.f('fk_medical_record_attachments_medical_record_id_medical_records')),
    sa.ForeignKeyConstraint(['pet_id'], ['pets.id'], name=op.f('fk_medical_record_attachments_pet_id_pets')),
    sa.ForeignKeyConstraint(['uploaded_by_user_id'], ['users.public_id'], name=op.f('fk_medical_record_attachments_uploaded_by_user_id_users')),
    sa.ForeignKeyConstraint(['vaccination_id'], ['vaccinations.id'], name=op.f('fk_medical_record_attachments_vaccination_id_vaccinations')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_medical_record_attachments'))
    )
    op.create_index(op.f('ix_medical_record_attachments_attachment_type'), 'medical_record_attachments', ['attachment_type'], unique=False)
    op.create_index(op.f('ix_medical_record_attachments_lab_test_id'), 'medical_record_attachments', ['lab_test_id'], unique=False)
    op.create_index(op.f('ix_medical_record_attachments_medical_record_id'), 'medical_record_attachments', ['medical_record_id'], unique=False)
    op.create_index(op.f('ix_medical_record_attachments_pet_id'), 'medical_record_attachments', ['pet_id'], unique=False)
    op.create_index(op.f('ix_medical_record_attachments_vaccination_id'), 'medical_record_attachments', ['vaccination_id'], unique=False)
    op.create_foreign_key(op.f('fk_family_members_user_id_users'), 'family_members', 'users', ['user_id'], ['public_id'])
    op.drop_constraint(op.f('uq_users_phone'), 'users', type_='unique')
    op.create_index(op.f('ix_users_phone'), 'users', ['phone'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_users_phone'), table_name='users')
    op.create_unique_constraint(op.f('uq_users_phone'), 'users', ['phone'], postgresql_nulls_not_distinct=False)
    op.drop_constraint(op.f('fk_family_members_user_id_users'), 'family_members', type_='foreignkey')
    op.drop_index(op.f('ix_medical_record_attachments_vaccination_id'), table_name='medical_record_attachments')
    op.drop_index(op.f('ix_medical_record_attachments_pet_id'), table_name='medical_record_attachments')
    op.drop_index(op.f('ix_medical_record_attachments_medical_record_id'), table_name='medical_record_attachments')
    op.drop_index(op.f('ix_medical_record_attachments_lab_test_id'), table_name='medical_record_attachments')
    op.drop_index(op.f('ix_medical_record_attachments_attachment_type'), table_name='medical_record_attachments')
    op.drop_table('medical_record_attachments')
    op.drop_index(op.f('ix_vaccinations_vaccine_name'), table_name='vaccinations')
    op.drop_index(op.f('ix_vaccinations_pet_id'), table_name='vaccinations')
    op.drop_index(op.f('ix_vaccinations_next_due_date'), table_name='vaccinations')
    op.drop_index(op.f('ix_vaccinations_administered_at'), table_name='vaccinations')
    op.drop_table('vaccinations')
    op.drop_index(op.f('ix_prescriptions_prescribed_by_doctor_id'), table_name='prescriptions')
    op.drop_index(op.f('ix_prescriptions_pet_id'), table_name='prescriptions')
    op.drop_index(op.f('ix_prescriptions_medical_record_id'), table_name='prescriptions')
    op.drop_index(op.f('ix_prescriptions_is_active'), table_name='prescriptions')
    op.drop_index(op.f('ix_prescriptions_end_date'), table_name='prescriptions')
    op.drop_table('prescriptions')
    op.drop_index(op.f('ix_lab_tests_status'), table_name='lab_tests')
    op.drop_index(op.f('ix_lab_tests_pet_id'), table_name='lab_tests')
    op.drop_index(op.f('ix_lab_tests_ordered_by_doctor_id'), table_name='lab_tests')
    op.drop_index(op.f('ix_lab_tests_ordered_at'), table_name='lab_tests')
    op.drop_index(op.f('ix_lab_tests_medical_record_id'), table_name='lab_tests')
    op.drop_index('idx_ordered_at_desc', table_name='lab_tests', postgresql_ops={'ordered_at': 'DESC'})
    op.drop_table('lab_tests')
    op.drop_index(op.f('ix_pet_clinic_access_status'), table_name='pet_clinic_access')
    op.drop_index(op.f('ix_pet_clinic_access_pet_id'), table_name='pet_clinic_access')
    op.drop_index(op.f('ix_pet_clinic_access_doctor_id'), table_name='pet_clinic_access')
    op.drop_index(op.f('ix_pet_clinic_access_clinic_id'), table_name='pet_clinic_access')
    op.drop_index(op.f('ix_pet_clinic_access_access_expires_at'), table_name='pet_clinic_access')
    op.drop_index('idx_pet_clinic_status', table_name='pet_clinic_access')
    op.drop_table('pet_clinic_access')
    op.drop_index(op.f('ix_medical_records_visit_type'), table_name='medical_records')
    op.drop_index(op.f('ix_medical_records_visit_date'), table_name='medical_records')
    op.drop_index(op.f('ix_medical_records_pet_id'), table_name='medical_records')
    op.drop_index(op.f('ix_medical_records_doctor_id'), table_name='medical_records')
    op.drop_index(op.f('ix_medical_records_clinic_id'), table_name='medical_records')
    op.drop_index('idx_pet_visit_date', table_name='medical_records', postgresql_ops={'visit_date': 'DESC'})
    op.drop_table('medical_records')
    op.drop_index(op.f('ix_doctor_clinic_associations_doctor_id'), table_name='doctor_clinic_associations')
    op.drop_index(op.f('ix_doctor_clinic_associations_clinic_id'), table_name='doctor_clinic_associations')
    op.drop_table('doctor_clinic_associations')
    op.drop_index(op.f('ix_allergies_severity'), table_name='allergies')
    op.drop_index(op.f('ix_allergies_pet_id'), table_name='allergies')
    op.drop_index(op.f('ix_allergies_is_active'), table_name='allergies')
    op.drop_index(op.f('ix_allergies_allergy_type'), table_name='allergies')
    op.drop_table('allergies')
    op.drop_index(op.f('ix_doctor_profiles_user_id'), table_name='doctor_profiles')
    op.drop_index(op.f('ix_doctor_profiles_specialization'), table_name='doctor_profiles')
    op.drop_index(op.f('ix_doctor_profiles_license_number'), table_name='doctor_profiles')
    op.drop_table('doctor_profiles')
    op.drop_index(op.f('ix_clinic_profiles_user_id'), table_name='clinic_profiles')
    op.drop_index(op.f('ix_clinic_profiles_license_number'), table_name='clinic_profiles')
    op.drop_index(op.f('ix_clinic_profiles_clinic_name'), table_name='clinic_profiles')
    op.drop_table('clinic_profiles')
    # ### end Alembic commands ###
